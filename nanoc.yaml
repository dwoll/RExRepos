# A list of file extensions that nanoc will consider to be textual rather than
# binary. If an item with an extension not in this list is found,  the file
# will be considered as binary.
text_extensions: [ 'coffee', 'css', 'erb', 'haml', 'handlebars', 'hb', 'htm', 'html', 'js', 'less', 'markdown', 'md', 'ms', 'mustache', 'php', 'rb', 'sass', 'scss', 'txt', 'xhtml', 'xml' ]

# The path to the directory where all generated files will be written to. This
# can be an absolute path starting with a slash, but it can also be path
# relative to the site directory.
output_dir: output

# A list of index filenames, i.e. names of files that will be served by a web
# server when a directory is requested. Usually, index files are named
# “index.html”, but depending on the web server, this may be something else,
# such as “default.htm”. This list is used by nanoc to generate pretty URLs.
index_filenames: [ 'index.html' ]

# Whether or not to generate a diff of the compiled content when compiling a
# site. The diff will contain the differences between the compiled content
# before and after the last site compilation.
enable_output_diff: false

prune:
  # Whether to automatically remove files not managed by nanoc from the output
  # directory. For safety reasons, this is turned off by default.
  auto_prune: false

  # Which files and directories you want to exclude from pruning. If you version
  # your output directory, you should probably exclude VCS directories such as
  # .git, .svn etc.
  exclude: [ '.git', '.hg', '.svn', 'CVS' ]

# The data sources where nanoc loads its data from. This is an array of
# hashes; each array element represents a single data source. By default,
# there is only a single data source that reads data from the “content/” and
# “layout/” directories in the site directory.
string_pattern_type: legacy
data_sources:
  -
    # The type is the identifier of the data source. By default, this will be
    # `filesystem_unified`.
    type: filesystem_unified
    identifier_type: legacy

    # The path where items should be mounted (comparable to mount points in
    # Unix-like systems). This is “/” by default, meaning that items will have
    # “/” prefixed to their identifiers. If the items root were “/en/”
    # instead, an item at content/about.html would have an identifier of
    # “/en/about/” instead of just “/about/”.
    items_root: /

    # The path where layouts should be mounted. The layouts root behaves the
    # same as the items root, but applies to layouts rather than items.
    layouts_root: /

    # Whether to allow periods in identifiers. When turned off, everything
    # past the first period is considered to be the extension, and when
    # turned on, only the characters past the last period are considered to
    # be the extension. For example,  a file named “content/about.html.erb”
    # will have the identifier “/about/” when turned off, but when turned on
    # it will become “/about.html/” instead.
    allow_periods_in_identifiers: false

# Configuration for the “watch” command, which watches a site for changes and
# recompiles if necessary.
watcher:
  # A list of directories to watch for changes. When editing this, make sure
  # that the “output/” and “tmp/” directories are _not_ included in this list,
  # because recompiling the site will cause these directories to change, which
  # will cause the site to be recompiled, which will cause these directories
  # to change, which will cause the site to be recompiled again, and so on.
  dirs_to_watch: [ 'content', 'layouts', 'lib' ]

  # A list of single files to watch for changes. As mentioned above, don’t put
  # any files from the “output/” or “tmp/” directories in here.
  files_to_watch: [ 'nanoc.yaml', 'Rules' ]

  # When to send notifications (using Growl or notify-send).
  notify_on_compilation_success: true
  notify_on_compilation_failure: true

 # The base URL for this site. This is required for XML sitemap generation. 
base_url: "http://www.dwoll.de/rexrepos"
#base_url: "http://localhost:3000"
#base_url: "http://localhost/rexrepos"

## global variables used in YAML front matter and includes
title: RExRepos
tagline: R Examples Repository
author:
  name: Daniel Wollschlaeger
  email: contact@dwoll.de

#################################################
## hash with specific variables for RExRepos site
rer:
  assetPath: /content/assets
  categoriesPath: /categories.html
  tagsPath: /tags.html

  ## site structure:
  ## categories -> (sub-categories, if any) -> corresponding posts (Rmd filenames) ->  navigation titles
  rerCategs:
    R_Basics:
      gui: "R user interfaces"
      helpDocs: "Getting help and documentation"
      workspace: "Exploring the workspace"
      packages: "Add-on packages"
      arithmeticLogic: "Arithmetic and logic"
      vector: "Vectors"
      generateData: "Generate systematic and random data"
      transformData: "Data transformations"
      recode: "Recode variables"
      factors: "Factors"
      sets: "Sets"
      combinatorics: "Combinatorics"
      matrix: "Matrices"
      strings: "Character strings"
      timeDate: "Time and date"
    Descriptive:
      sumProdRange: "Sum, product, and range of data"
      mean: "The mean and other location measures"
      variance: "Variance, robust spread measures, skewness, and kurtosis"
      correlation: "Covariance, correlation, association measures for continuous variables"
      matrixStatistics: "Descriptive statistics for data in matrices"
      frequencies: "Frequency tables"
      association: "Association measures for unordered categorical variables"
      associationOrder: "Association measures for ordered categorical variables"
      interRaterICC: "Inter-rater-reliability and intra-class-correlation"
      aggregate: "Aggregate data"
      missingData: "Deal with missing data"
    Data_Frames:
      dataFrames: "Create and analyze data frames"
      dfTransform: "Transform data frames"
      aggregate: "Aggregate data"
      dfSplitMerge: "Split and merge data frames"
      dfReshape: "Reshape data frames"
      dfImportExport: "Data import and export"
    Univariate:
      Regression_Models:
        regression: "Multiple linear regression"
        regressionRobPen: "Robust and penalized regression"
        regressionModMed: "Moderation and mediation"
        regressionLogistic: "Logistic regression"
        regressionOrdinal: "Ordinal regression"
        regressionMultinom: "Multinomial regression"
        regressionPoisson: "Poisson regression"
        logLinear: "Log-linear models"
        regressionDiag: "Regression diagnostics"
        crossvalidation: "Crossvalidation"
      Survival_analysis:
        survivalKM: "Kaplan-Meier-estimate"
        survivalCoxPH: "Cox proportional hazards"
        survivalParametric: "Parametric proportional hazards"
      t_Tests:
        tTest: "t-tests"
      ANOVA:
        anovaCRp: "One-way ANOVA"
        anovaCRFpq: "Two-way ANOVA"
        ancova: "Analysis of covariance"
        anovaRBp: "One-way repeated-measures ANOVA"
        anovaRBFpq: "Two-way repeated-measures ANOVA"
        anovaSPFpq: "Two-way split-plot ANOVA"
        anovaSPFpqr: "Three-way split-plot ANOVA"
        anovaMixed: "Mixed effects models"
        anovaSStypes: "Sum of squares type I, II, and III"
      General_Topics:
        normality: "Assess normality"
        varianceHom: "Assess variance homogeneity"
    Nonparametric:
      Classical_nonparametric_methods:
        npWilcoxon: "Location tests for one and two samples (Sign, Wilcoxon signed-rank, Wilcoxon rank-sum / Mann-Whitney-U)"
        npKruskalFriedman: "Location tests for more than two samples (Kruskal-Wallis, linear-by-linear, Friedman, Page)"
        npBinomial: "Binomial test and chi^2-test for proportions"
        npRuns: "Runs-test"
        association: "Association tests for unordered categorical variables"
        associationOrder: "Association tests for ordered categorical variables"
        npCochran: "Cochran-Q-test"
        npBowker: "Bowker-test"
        npMcNemar: "McNemar-test"
        npStuartMaxwell: "Stuart-Maxwell-test for marginal homogeneity"
      Resampling_methods:
        resamplingPerm: "Permutation tests"
        resamplingBoot: "Bootstrapping"
        resamplingBootStrat: "Stratified bootstrapping"
        resamplingBootALM: "Bootstrapping linear models"
    Multivariate:
      linearAlgebra: "Linear algebra calculations"
      multPCA: "Principal components analysis"
      multFA: "Factor analysis"
      multFApoly: "Factor analysis for ordinal data"
      multMDS: "Multidimensional scaling"
      multRegression: "Multivariate multiple regression"
      multHotelling: "Hotelling's T^2-test"
      multMANOVA: "Multivariate analysis of variance"
      multLDA: "Linear discriminant analysis"
      normality: "Assess multivariate normality"
    Diagrams:
      Diagram_basics:
        diagDevice: "Graphics devices"
        diagScatter: "Scatter plots and line diagrams"
        diagFormat: "Customize diagrams: Formatting"
        diagAddElements: "Customize diagrams: Add elements"
        diagGgplot: "Diagrams with the ggplot2 package"
      Specific_diagrams:
        diagCategorical: "Diagrams for categorical data"
        diagDistributions: "Visualize univariate and bivariate distributions"
        diagMultivariate: "Diagrams for multivariate data"
        diagBounding: "Convex hull, (minimum) bounding box, and minimum enclosing circle"
        diagSplines: "Linear interpolation, polynomial smoothing, and splines"
        diagMultiple: "Multiple diagrams per graphics device"
    Workflow:
      rerWorkflowJN: "Build websites with R and nanoc or Jekyll"
      rerWorkflowWP: "Build websites with R and WordPress"
